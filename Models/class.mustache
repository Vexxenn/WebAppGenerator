function {{classTitle}} ({{classProperties}}) 
{
    {{{classConstructor}}}
    {{{nonEnumProps}}}
}
var database = require("../Database/sqlite.js")("../Publish/Database/labs.db");
var {{classTitle}}Schema = require("../Models/{{classTitle}}-schema");

{{classTitle}}.all = function (callback) {
    database.all("SELECT * FROM {{classTitle}}s", {{classTitle}}, callback);
}

{{classTitle}}.get = function (id, callback) {
    database.get("SELECT * FROM {{classTitle}}s WHERE {{primaryKey}} = ?", [id], {{classTitle}}, callback);
}

{{classTitle}}.many = function(model, id, callback){
    let tablerOrder = ["{{classTitle}}", `${model}`];
    tablerOrder.sort();
    tablerOrder = tablerOrder.join('_');
    database.where("SELECT {{classTitle}}s.* FROM {{classTitle}}s INNER JOIN " + tablerOrder + " ON " + tablerOrder + ".{{primaryKey}}="+
    "{{classTitle}}s.{{primaryKey}} WHERE " + tablerOrder + `.${model}`+"_id = ?", [id], {{classTitle}}, callback);
}

{{classTitle}}.prototype.save = function (checkboxValues, callback) {
    if(this.{{primaryKey}}) {
        database.run("UPDATE {{classTitle}}s SET {{{updateValues}}} WHERE {{primaryKey}} = ?", {{{values}}}, callback);
    } else {
        database.run("INSERT INTO {{classTitle}}s ({{classProperties}}) VALUES ({{{insertValues}}})", {{{values}}}, function(){
            if(checkboxValues != undefined){
                if(checkboxValues.length != 0){
                    var relationMToM = function(){
                        for(let i = 0; i < {{classTitle}}Schema.references.length; i++){
                            if({{classTitle}}Schema.references[i].relation == "M-M"){
                                return {{classTitle}}Schema.references[i].model;
                            }
                        }
                    }
                    var tablerOrder = ["{{classTitle}}", relationMToM()];
                    tablerOrder.sort();
                    tablerOrder = tablerOrder.join('_');

                    for(let i = 0; i < checkboxValues.length; i++){
                        if(tablerOrder.split("_")[0] == "{{classTitle}}"){
                            database.get("SELECT {{primaryKey}} FROM {{classTitle}}s ORDER BY {{primaryKey}} DESC LIMIT 1", [], {{classTitle}}, function(id){
                                //Retorna o id a false apesar da query funcionar propriamente (query foi testada no DB Browser)
                                if(id == undefined){
                                    database.run("INSERT INTO " + tablerOrder + " VALUES (?,?)", [1, checkboxValues[i]]);
                                }else{
                                    database.run("INSERT INTO " + tablerOrder + " VALUES (?,?)", [id["{{primaryKey}}"], checkboxValues[i]]);
                                }
                            })
                        }else{
                            database.get("SELECT {{primaryKey}} FROM {{classTitle}}s ORDER BY {{primaryKey}} DESC LIMIT 1", [], {{classTitle}}, function(id){  
                                if(id == undefined){
                                    database.run("INSERT INTO " + tablerOrder + " VALUES (?,?)", [checkboxValues[i], 1]);
                                }else{
                                    database.run("INSERT INTO " + tablerOrder + " VALUES (?,?)", [checkboxValues[i], id["{{primaryKey}}"]]);
                                }
                            })
                        }   
                    }
                }
            }
        }); 
    }
}
{{classTitle}}.top = function (property,order,limit,callback) {
    var dbprop = Object.keys({{classTitle}}.mappingDBtoObject).find(key => {{classTitle}}.mappingDBtoObject[key] == property);
    database.where(`SELECT * FROM {{classTitle}}s ORDER BY ${dbprop} ${order} LIMIT ?`, [limit], {{classTitle}}, callback);
}


{{classTitle}}.delete = function (id, callback) {
    database.run("DELETE FROM {{classTitle}}s WHERE {{classTitle}}_id = ?", [id], callback);
}

{{classTitle}}.mappingDBtoObject = {
    {{{mappingDBtoObject}}}
}

module.exports = {{classTitle}};